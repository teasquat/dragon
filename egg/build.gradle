import static java.awt.RenderingHints.*
import java.awt.image.BufferedImage
import javax.imageio.ImageIO
import java.text.Normalizer
import org.yaml.snakeyaml.Yaml

configure()

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.1'
        classpath 'org.robovm:robovm-gradle-plugin:1.6.0'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
        classpath 'org.yaml:snakeyaml:1.16'
        classpath 'com.badlogicgames.packr:packr:1.3-SNAPSHOT'
    }
}

apply plugin: "base"

allprojects {
    version = cfg.version

    ext {
        cfg = cfg
        appName = cfg.name
        packageName = cfg.package
        packageDir = cfg.package.replace('.', '/')
        gdxVersion = '1.6.4'
        roboVMVersion = '1.6.0'
        screenOrientation =
            cfg.window && cfg.window.orientation ?
            cfg.window.orientation : "sensor"
        vals = [[
            "%APP_NAME%",
            "%PACKAGE%",
            "%PACKAGE_DIR%",
            "%SCREEN_ORIENTATION%"
        ],[
            appName,
            packageName,
            packageDir,
            screenOrientation
        ]]
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":shared") {
    apply plugin: "java"

    dependencies {
        compile files("../lib/luaj.jar")
        compile files("../lib/snakeyaml.jar")
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        if (cfg.lib) { for (lib in cfg.lib) { compile lib } }
    }
}

project(":desktop") {
    apply plugin: "java"

    dependencies {
        compile project(":shared")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    }
}

project(":android") {
    apply plugin: "android-sdk-manager"
    apply plugin: "android"

    configurations { natives }

    dependencies {
        compile project(":shared")
        compile files("../lib/luaj.jar")
        compile files("../lib/snakeyaml.jar")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
    }
}

project(":ios") {
    apply plugin: "java"
    apply plugin: "robovm"

    dependencies {
        compile project(":shared")
        compile files("../lib/luaj.jar")
        compile files("../lib/snakeyaml.jar")
        compile "org.robovm:robovm-rt:${roboVMVersion}"
        compile "org.robovm:robovm-cocoatouch:${roboVMVersion}"
        compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-ios"
    }
}

task cleanAssets() << {
    deldir file("android/assets")
    deldir file("shared/build/lua")
}

clean.dependsOn cleanAssets

task init() << {
    file("../assets").mkdir()

    def origpname = initName.replace('"', "")
    def pname = Normalizer
        .normalize(origpname, Normalizer.Form.NFD)
        .replace(" ", "")
        .replaceAll("[^\\p{ASCII}]", "")
        .toLowerCase()

    def origuname = System.getProperty("user.name", "username")
    def uname = Normalizer
        .normalize(origuname, Normalizer.Form.NFD)
        .replace(" ", "")
        .replace(".", "")
        .replace("_", "")
        .replace("-", "")
        .replaceAll("[^\\p{ASCII}]", "")
        .toLowerCase()

    def text =
        "name: ${origpname}\n" +
        "package: com.${uname}.${pname}\n" +
        "version: 1.0"

    new File("../_config.yml").text = text
    copy { from "res"; into "../assets"; include "main.moon" }
    copy { from "res"; into "../"; include ".gitignore" }
}

task rocks() << {
    if (!cfg.rocks) return

    for (rock in cfg.rocks) {
        exec { commandLine "luarocks", "install", rock, "--tree=rocks" }
    }
}

task update(dependsOn: [':rocks', ':updateAssets']) << {
    if (!file("shared/build/moon").exists()) {
        file("shared/build/moon").mkdirs();
    }

    def src = ".."
    def res = "res"
    def out = "android/assets/smaug"
    def files = [ "icon.png", "font.ttf" ]

    for(fl in files) {
        if (file("$src/$fl").exists()) {
            copy { from src; into out; include "$fl" }
        } else {
            copy { from res; into out; include "$fl" }
        }
    }

    def scfg = new Yaml().load(file("$src/_config.yml").text)

    if (scfg.sign) {
        scfg.sign = "private"
    }

    def cfgf = file("$out/_config.yml")
    if (cfgf.exists()) cfgf.delete()
    cfgf.createNewFile()
    cfgf.text = new Yaml().dump(scfg)
}

task updateDesktop() << {
    def out = "android/assets/smaug"
    copyAndReplace("platforms/desktop/DesktopLauncher.java", "desktop/src/$packageDir/desktop/DesktopLauncher.java")
    copyAndResizeIcon("${out}/icon-16.png", 16)
    copyAndResizeIcon("${out}/icon-32.png", 32)
    copyAndResizeIcon("${out}/icon-64.png", 64)
    copyAndResizeIcon("${out}/icon-192.png", 192)
    copyAndResizeIcon("${out}/icon-256.png", 256)
}

task updateAndroid(dependsOn: 'android:copyNatives') << {
    copyAndReplace("platforms/android/AndroidManifest.xml", "android/AndroidManifest.xml")
    copyAndReplace("platforms/android/AndroidLauncher.java", "android/src/$packageDir/android/AndroidLauncher.java")
    copyAndResizeIcon("android/res/drawable-mdpi/ic_launcher.png", 48)
    copyAndResizeIcon("android/res/drawable-hdpi/ic_launcher.png", 72)
    copyAndResizeIcon("android/res/drawable-xhdpi/ic_launcher.png", 96)
    copyAndResizeIcon("android/res/drawable-xxhdpi/ic_launcher.png", 144)
    copyAndResizeIcon("android/ic_launcher-web.png", 512)
}

task updateIOS() << {
    copyAndReplace("platforms/ios/robovm.properties", "ios/robovm.properties")
    copyAndReplace("platforms/ios/IOSLauncher.java", "ios/src/$packageDir/ios/IOSLauncher.java")
    copyAndResizeIcon("ios/data/Icon.png", 57)
    copyAndResizeIcon("ios/data/Icon-72.png", 72)
    copyAndResizeIcon("ios/data/Icon@2x.png", 114)
    copyAndResizeIcon("ios/data/Icon-72@2x.png", 144)
}

task updateAssets(type: Sync) {
    from "../assets"
    into "android/assets"
    exclude "**/*.moon"
    exclude "**/*.lua"
    exclude "**/*.DS_Store"
    exclude "**/*Thumbs.db"
}

def configure() {
    def f = file("../_config.yml")

    if (f.exists()) {
        ext.cfg = new Yaml().load(f.text)
    } else {
        ext.cfg = new Yaml().load(
            "name: smaug\n" +
            "package: smaug\n" +
            "version: 1.0"
        )
    }
}

def deldir(file) {
    if(file.exists()) {
        def files = file.listFiles();

        if(files != null) {
            for(File fl: files) {
                if(fl.isDirectory()) {
                    deldir(fl)
                } else {
                    fl.delete()
                }
            }
        }
    }

    file.delete()
}

def copyAndReplace(input, out) {
    def values = ext.vals
    def total = values[0].size() - 1
    def txt = file(input).text

    for(i in 0..total) {
        txt = txt.replace(values[0][i], values[1][i])
    }

    out = new File(out)
    if (out.exists()) out.delete()
    out.getParentFile().mkdirs()
    out.createNewFile()
    out.write(txt)
}

def copyAndResizeIcon(targetPath, newSize) {
    def source = file("../icon.png").exists() ? file("../icon.png") : file("res/icon.png")
    def target = new File(targetPath)
    if (target.exists()) target.delete()
    target.getParentFile().mkdirs()
    target.createNewFile()

    def img = ImageIO.read(source)

    new BufferedImage(newSize, newSize, img.type).with {
        i -> createGraphics().with {
            setRenderingHint( KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC )
            drawImage(img, 0, 0, newSize, newSize, null)
            dispose()
        }

        ImageIO.write(i, 'png', target)
    }
}
